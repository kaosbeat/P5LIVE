{
  "version": "1.2.0",
  "revision": 17,
  "structure": [
    {
      "name": "nerdlablivecoding",
      "type": "folder",
      "toggle": "expand",
      "contents": [
        {
          "name": "LiveCoding101 - intro",
          "type": "sketch"
        },
        {
          "name": "LiveCoding102",
          "type": "sketch"
        },
        {
          "name": "LiveCoding102 - 2D",
          "type": "sketch"
        },
        {
          "name": "LiveCoding102 - shader",
          "type": "sketch"
        },
        {
          "name": "LiveCoding102 - 3D",
          "type": "sketch"
        },
        {
          "name": "LiveCoding103 - control",
          "type": "sketch"
        },
        {
          "name": "LiveCoding103 - fine_control",
          "type": "sketch"
        },
        {
          "name": "LiveCoding104-parametricmodeling",
          "type": "sketch"
        }
      ]
    }
  ],
  "sketches": [
    {
      "sketchName": "LiveCoding101 - intro",
      "sketchCode": "function preload() {\n\tsubfont = loadFont('includes/fonts/RobotoMono-Regular.ttf');\n\trus = loadFont('includes/fonts/USSR.ttf');\n\tsubbold = loadFont('includes/fonts/Inconsolata-Bold.ttf')\n\n}\n\nvar txt = [\t[\"Nerdlab VJ LiveCODING 101\"], \n\t\t\t[\"@kaosbeat\", \n\t\t\t\t[\"twitter\"], \n\t\t\t\t[\"instagram\"], \n\t\t\t\t[\"github\", \"all todays code is on github (already) as a fork of P5Live\"]], \n\t\t\t[\"system overview\", \n\t\t\t\t[\"environment\", \"The environment is the place where we write and run our code\"],\n\t\t\t\t[\"browser\", \"webgl, but also audioAPI, webmidi, OSC and more extra technologies come for free in the browser\" ], \n\t\t\t\t[\"P5Live\", \"https://teddavis.org/p5live/\" ], \n\t\t\t\t[\"javascript\", \"P5js, https://p5js.org/\"], \n\t\t\t\t[\"Co-coding\"]],\n\t\t\t[\"commands\", [\"\",\"see 'about p5Live' ? \"]],\n\t\t\t[\"reference\", [\"p5js\", \" https://p5js.org/reference/\"], [\"javascript\", \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference\"] ]\n\t\t\t];\nvar txtsize = 150;\nvar subtitlesize = 100;\nvar subtextsize = 50;\nvar points = [];\nlet base_url = \"https://www.youtube.com/watch?v=KrhdmUiFKHU?autoplay=1\";\n\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL);\n\tstate = 0;\n\tsubstate = 0;\n\tfillval = 123;\n\tcreateDiv('this is some text');\n\n}\n\nfunction mousePressed() {\n  if (mouseX > 0 && mouseX < 100 && mouseY > 0 && mouseY < 100) {\n    let fs = fullscreen();\n    fullscreen(!fs);\n  }\n}\n\n\n///When editor is enabled keypresses are captured, so CTRL-E before using keys!!!\nfunction keyPressed() {\n  if (keyCode === RIGHT_ARROW) {\n  \tif (state < txt.length-1) {\n    \tstate = state + 1;\n    \tsubstate = 0;\n    \t// fillval = 255;\n  \t}\n  } else if (keyCode === LEFT_ARROW) {\n  \tif (state > 0) {\n    \tstate = state - 1;\n    \tsubstate = 0;\n    }\n  } else if (keyCode === UP_ARROW) {\n    if (substate > 0) {\n    \tsubstate = substate - 1;\n    }\n  }else if (keyCode === DOWN_ARROW) {\n  \tif (substate < txt[state].length - 1) {\n    \tsubstate = substate + 1;\n\t}\n  }\n  return false; // prevent default\n}\n\nfunction draw() {\n\tscale (0.91);\n\ttranslate(-width/2,-height/2, -100);\n\ttitle = txt[state][0];\n\tsubtitle = txt[state][substate][0];\n\tsubtxt = txt[state][substate][1];\n\tbackground(0);\n\tfill(25,fillval,31);\n\ttextSize(txtsize);\n\t// textAlign(CENTER,CENTER)\n\ttextFont(rus);\n\ttext(title , 0, 0, width, height);\n\tif (substate > 0) {\n\t\ttextFont(subbold);\n\t\ttextSize(subtitlesize);\n\t\ttext(subtitle, 200,200);\n\t\ttextSize(subtextsize);\n\t\ttextFont(subfont);\n\t\ttext(subtxt, 200,400,1200,400);\n\t\t\n\t}\t\n\tif (state == 1 && substate == 1) {\n\t\tgetPoints(title, rus, 100);\n\t\tfor(let i = 0; i < points.length-1; i++) {\n\t\t\tstroke (255);\n\t\t\tstrokeWeight(1);\n\t\t\tlet pt = points[i+1];\n\t\t\tlet prevpt = points[i];\n\t\t\tpush();\n\t\t\t//translate(sin(frameCount * i * 0.00003)*20 + pt.x, 500 + pt.y);\n\t\t\t// rotate(radians(sin(frameCount * i * 0.00003) * 180));\n\t\t\tvar w = dist(mouseX, mouseY, pt.x + width / 4, pt.y + height * .7) / 3;\n\t\t\tline(prevpt.x, prevpt.y, pt.x, pt.y);\n\t\t\tpop();\n\t\t\t// text(points[i].x, 200+i*20,200)\n\t\t}\n\t}\n\t\tif (state == 1 && substate == 2) {\n\t\tgetPoints(title, rus, txtsize/2);\n\t\tfor(let i = 0; i < points.length-1; i++) {\n\t\t\tstroke (255);\n\t\t\tlet pt = points[i+1];\n\t\t\tlet prevpt = points[i];\n\t\t\tpush();\n\t\t\ttranslate(width/2+100, height/2+100);\n\t\t\tscale(0.7);\n\t\t\trotateZ(radians(sin(frameCount * i * 0.00003) * 180));\n\t\t\tpush();\n\t\t\n\t\t\ttranslate(200 + pt.x, 570 + pt.y);\n\t\t\txoff = i*1.1;\n\t\t\tyoff = -i*1.4;\n\t\t\tstrokeWeight(i/points.length*20);\n\t\t\tstroke(0,255,0,122)\n\t\t\trotate(radians(sin(frameCount * i * 0.00003) * 180));\n\t\t\tvar w = dist(mouseX, mouseY, pt.x + width / 4, pt.y + height * .7) / 3;\n\t\t\tline(pt.x * i*0.0013, pt.y, pt.x + xoff, pt.y + yoff,100, 100);\n\t\t\tpop();\n\t\t\tpop();\n\t\t}\n\t}\n\t\n\tif (1 === 0){\n\t\tpush();\n\t\trotateX(radians(10));\n\t\tstroke(255)\n\t\tstrokeWeight(1);\n\t\tfor (let i = 0; i<100; i++){\n\t\t\tline(0,(i*10),0,2000,1000,-(i*10));\n\t\t}\n\t\tpop();\n\t}\n\ttextSize(subtitlesize);\n\ttextFont(rus);\n\ttext(state, 50,800);\n\ttext(substate, 50,950);\n\n}\n\nfunction getPoints(txt,font,size) {\n\t// var s = width / txt.length;\n\tpoints = font.textToPoints(txt, 0, 0, size);\n\n}\n"
    },
    {
      "sketchName": "LiveCoding102",
      "sketchCode": "function preload() {\n\t// font = loadFont('includes/fonts/RobotoMono-Regular.ttf');\n\trus = loadFont('includes/fonts/USSR.ttf');\n\n}\nvar program;\n\tvar x, y, nx, ny;\n\tvar s = 50.0;\n\tvar sMin = 25;\n\tvar sg = 2;\n\tvar nxv = 0.006;\n\tvar nyv = 0.005;\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL);\n\t\n\ttitle = createGraphics(width, height);\n\tbuildBox(title);\n\t\n\tparticlewindow = createGraphics(500, height, WEBGL);\n\tbuildBox(particlewindow);\n\tsystem = new ParticleSystem(createVector(0, -height/2 + 100), particlewindow);\n\n\twindow2D = createGraphics(500, height);\n\tbuildBox(window2D);\n\twindow2Dsetup();\n\t\n\twindow3D = createGraphics(500, height, WEBGL);\n\tbuildBox(window3D);\n\n}\nfunction mousePressed() {\n  if (mouseX > 0 && mouseX < 100 && mouseY > 0 && mouseY < 100) {\n    let fs = fullscreen();\n    fullscreen(!fs);\n  }\n}\n\n\nlet txt = \t\"Visual Types\",\n\ttxtsize = 200,\n\ttitle = 0;\n\n\n\nfunction draw() {\n\tscale (0.5);\n\tbackground(52);\n\t\n\t\n\t\n\tpush();\n\n\t\n\tTitle();\n\tplane(title.width, title.height)\n\t\n\ttranslate(-500,0,100);\n\tparticleDraw();\n\tplane(particlewindow.width, particlewindow.height);\n\t\n\ttranslate(600,0,0);\n\twindow3Ddraw();\n\tplane(window3D.width, window3D.height);\n\t\n\t\n\ttranslate(600,0,0);\n\twindow2Ddraw();\n\tplane(window2D.width, window2D.height);\n\t\n\tpop();\n\t\n}\n\n\nfunction Title(){\n\ttitle.stroke(25);\n\ttitle.fill(15,123,31);\n\t// title.background(225,25,25,150);\n\ttitle.textSize(200);\n\ttitle.textAlign(CENTER,CENTER);\n\ttitle.textFont(rus);\n\ttitle.text(txt , 0, 0, windowWidth, windowHeight);\n\ttexture(title);\n}\n\nfunction particleDraw(){\n\tparticlewindow.background(230,220,250, 139)\n\tparticlewindow.rect(0,0,200,200);\n\tsystem.addParticle();\n\tsystem.run();\t\t\n\ttexture(particlewindow);\n}\t\n\nfunction window2Dsetup() {\n\tnx = random(500);\n\tny = random(height);\n\tbackground(0);\n}\nfunction window2Ddraw() {\n\tx = floor(noise(nx) * 500);\n\ty = floor(noise(ny) * height);\n\twindow2D.fill(255);\n\twindow2D.stroke(0);\n\twindow2D.strokeWeight(0.3);\n\tif(mouseIsPressed) {\n\t\ts += sg;\n\t} else {\n\t\ts -= sg;\n\t\tif(s < sMin)\n\t\t\ts = sMin;\n\t}\n\twindow2D.ellipse(x, y, s, s);\n\tnx += nxv;\n\tny += nyv;\n\ttexture(window2D);\n}\n\n\nybox = 10;\ndirection = 1;\nfunction window3Ddraw() {\n\twindow3D.background(35,25,0, 123);\n\tpush();\n\ttranslate(34,10, 2);\n\trotate(4);\n\twindow3D.box(100,ybox,100);\n\t\n\t\n\tif (ybox > 1000) {\n\t\tdirection = -1;\n\t}\n\tif (ybox < 10) {\n\t\tdirection = 1;\n\t}\n\tybox = ybox + 20*direction;\n\tpop();\n\ttexture(window3D);\n\t\n}\n\n\n\nfunction buildBox(pg) {\n\tpg.clear();\n\tpg.noFill();\n\tpg.stroke(255,0,0);\n\tpg.strokeWeight(3);\n\tpg.rect(1, 1, pg.width - 2, pg.height - 2);\n}\n\n\n// https://p5js.org/examples/simulate-particle-system.html\n// A simple Particle class\nlet Particle = function(position, ctx) {\n  this.acceleration = createVector(0, 0.05);\n  this.velocity = createVector(random(-1, 1), random(-1, 0));\n  this.position = position.copy();\n  this.lifespan = 255;\n  this.ctx = ctx;\n};\n\nParticle.prototype.run = function() {\n  this.update();\n  this.display();\n};\n\n// Method to update position\nParticle.prototype.update = function(){\n  this.velocity.add(this.acceleration);\n  this.position.add(this.velocity);\n  this.lifespan -= 2;\n};\n\n// Method to display\nParticle.prototype.display = function() {\n  this.ctx.stroke(200, this.lifespan);\n  this.ctx.strokeWeight(2);\n  this.ctx.fill(127, this.lifespan);\n  this.ctx.ellipse(this.position.x, this.position.y, 12, 12);\n};\n\n// Is the particle still useful?\nParticle.prototype.isDead = function(){\n  return this.lifespan < 0;\n};\n\nlet ParticleSystem = function(position, ctx) {\n  this.origin = position.copy();\n  this.particles = [];\n  this.ctx = ctx;\n};\n\nParticleSystem.prototype.addParticle = function() {\n  this.particles.push(new Particle(this.origin, this.ctx));\n};\n\nParticleSystem.prototype.run = function() {\n  for (let i = this.particles.length-1; i >= 0; i--) {\n    let p = this.particles[i];\n    p.run();\n    if (p.isDead()) {\n      this.particles.splice(i, 1);\n    }\n  }\n};\n"
    },
    {
      "sketchName": "LiveCoding102 - 2D",
      "sketchCode": "/*\twanderingWorm // cc teddavis.org 2019\t*/\n\nvar x, y, nx, ny;\nvar s = 50.0;\nvar sMin = 25;\nvar sg = 2;\nvar nxv = 0.006;\nvar nyv = 0.005;\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight);\n\tnoCursor();\n\tnx = random(width);\n\tny = random(height);\n\tbackground(0);\n}\n\nfunction draw() {\n\tx = floor(noise(nx) * width);\n\ty = floor(noise(ny) * height);\n\tfill(255);\n\tif(mouseIsPressed) {\n\t\ts += sg;\n\t} else {\n\t\ts -= sg;\n\t\tif(s < sMin)\n\t\t\ts = sMin;\n\t}\n\n\tellipse(x, y, s, s);\n\n\tnx += nxv;\n\tny += nyv;\n}"
    },
    {
      "sketchName": "LiveCoding102 - shader",
      "sketchCode": "\n// P5.js Shader \n//inspired by Pierre MARZIN. Check his stuff out here https://www.openprocessing.org/user/19666\n\nvar program;\n\nfunction setup() {\n pixelDensity(1);\n  //createCanvas(500, 500,WEBGL);\n\n    createCanvas(windowWidth, windowHeight,WEBGL);\n    gl=this.canvas.getContext('webgl');\n\trectMode(CENTER);\n  noStroke();\n  fill(1);\n  program = createShader(vert,frag);\n\t}\n\nfunction draw() {\n  shader(program);\n  background(0);\n\tprogram.setUniform('resolution',[width,height]);\n\tprogram.setUniform('time',millis()/20);\n  rect(0,0,width,height);\n}\n\n\nvar vert=`\n#ifdef GL_ES\n      precision highp float;\n      precision highp int;\n    #endif\n\t\t#extension GL_OES_standard_derivatives : enable\n\n    // attributes, in\n    attribute vec3 aPosition;\n    attribute vec3 aNormal;\n    attribute vec2 aTexCoord;\n    attribute vec4 aVertexColor;\n\n    // attributes, out\n    varying vec3 var_vertPos;\n    varying vec4 var_vertCol;\n    varying vec3 var_vertNormal;\n    varying vec2 var_vertTexCoord;\n\n    // matrices\n    uniform mat4 uModelViewMatrix;\n    uniform mat4 uProjectionMatrix;\n    //uniform mat3 uNormalMatrix;\n\n    void main() {\n      gl_Position = uProjectionMatrix * uModelViewMatrix * vec4(aPosition, 1.0);\n\n      // just passing things through\n      // var_vertPos      = aPosition;\n      // var_vertCol      = aVertexColor;\n      // var_vertNormal   = aNormal;\n      // var_vertTexCoord = aTexCoord;\n    }\n`;\nvar frag=`\n\n#ifdef GL_ES\nprecision highp float;\n#endif\n\nuniform vec2 resolution;\nuniform float time;\n\nvoid main(void)\n{\n    vec2 p = -1.0 + 4.0 * gl_FragCoord.xy / resolution.xy;\n    float a = time*1.0;\n    float d,e,f,g=1.0/40.0,h,i,r,q;\n    e=40.0*(p.x*0.5+0.5);\n    f=400.0*(p.y*0.5+0.5);\n    i=20.0+sin(e*g+a/150.0)*20.0;\n  //  d=200.0+sin(f*g/2.0)*18.0+cos(e*g)*7.0;\n    r=sqrt(pow(i-e,2.0)+pow(d-f,2.0));\n    q=f/r;\n    e=(r*sin(q))-a/2.0;f=(r*atan(q))-a/2.0;\n    d=cos(e*g)*1.0+cos(e*g)*1.0+r;\n    h=((f+d)+a/2.0)*g;\n    i=cos(h+r*p.x/1.3)*(e+e+a)+cos(q*g*6.0)*(r+h/3.0);\n    h=sin(f*g)*144.0-sin(e*g)*212.0*p.x;\n    h=(h+(f-e)*q+sin(r-(a+h)/7.0)*10.0+i/4.0)*g;\n    i+=cos(h*2.3*sin(a/350.0-q))*184.0*sin(q-(r*4.3+a/12.0)*g)+tan(r*g+h)*184.0*cos(r*g+h);\n    i=mod(i/5.6,256.0)/64.0;\n    if(i<0.0) i+=4.0;\n    if(i>=2.0) i=4.0-i;\n    d=r/850.0;\n    d+=sin(d*d*8.0)*0.52;\n    f=(sin(a*g)+1.0)/2.0;\n    gl_FragColor=vec4(vec3(f*i/1.6,i/2.0+d/13.0,i)*d*p.x+vec3(i/1.3+d/8.0,i/2.0+d/18.0,i)*d*(1.0-p.x),1.0);\n}`\n"
    },
    {
      "sketchName": "LiveCoding102 - 3D",
      "sketchCode": "/*\twebgl_primatives // cc teddavis.org 2019\t*/\n\n\nlet v = .3;\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL);\n\tangleMode(DEGREES);\n}\n\nfunction draw() {\n\tbackground(0);\n\torbitControl(5);\n\n\tortho();\n\n\tif(mouseIsPressed) {\n\t\tlights();\n\t\tnoStroke();\n\t\tfill(255);\n\t} else {\n\t\tstroke(255);\n\t\tnoFill();\n\t}\n\n\n\tpush();\n\ttranslate(rPos(0));\n\trotateX(frameCount / 4);\n\trotateZ(frameCount / 2);\n\tplane(150, 150);\n\tpop();\n\n\tpush();\n\ttranslate(rPos(50));\n\trotateX(frameCount / 4);\n\trotateZ(frameCount / 2);\n\tbox(150);\n\tpop();\n\n\tpush();\n\ttranslate(rPos(100));\n\trotateX(frameCount / 4);\n\trotateY(frameCount / 4);\n\tsphere(100);\n\tpop();\n\n\tpush();\n\ttranslate(rPos(150));\n\trotateX(frameCount / 4);\n\trotateY(frameCount / 4);\n\tellipsoid(100, 30);\n\tpop();\n\n\tpush();\n\ttranslate(rPos(200));\n\trotateY(frameCount / 2);\n\trotateX(frameCount / 3);\n\tcone(100, 150);\n\tpop();\n\n\tpush();\n\ttranslate(rPos(250));\n\trotateX(frameCount / 4);\n\trotateZ(frameCount / 3);\n\ttorus(100, 50);\n\tpop();\n\n\tpush();\n\ttranslate(rPos(300));\n\trotateY(frameCount / 2);\n\trotateZ(frameCount / 4);\n\tcylinder(100, 100);\n\tpop();\n}\n\nfunction rPos(off) {\n\tlet x = (sin(off + frameCount * v) * width / 3);\n\tlet y = (cos(off + frameCount * v) * height / 3);\n\treturn createVector(x, y);\n}"
    },
    {
      "sketchName": "LiveCoding103 - control",
      "sketchCode": "function preload() {\n\tsubfont = loadFont('includes/fonts/RobotoMono-Regular.ttf');\n\trus = loadFont('includes/fonts/USSR.ttf');\n\tsubbold = loadFont('includes/fonts/Inconsolata-Bold.ttf')\n\n}\n\nvar txt = [\t[\"Control\"], \n\t\t\t[\"Audio Reactive\", \n\t\t\t\t[\"FFT\", \"more info + code examples \\\n\t\t\t\thttps://github.com/therewasaguy/p5-music-viz/tree/master \\\n\t\t\t\ttime domain osc \\\n\t\t\t\thttps://therewasaguy.github.io/p5-music-viz/demos/03_time_domain_oscilloscope/\"]], \n\t\t\t[\"system overview\", \n\t\t\t\t[\"environment\", \"The environment is the place where we write and run our code\"],\n\t\t\t\t[\"browser\", \"webgl, but also audioAPI, webmidi, OSC and more extra technologies come for free in the browser\" ], \n\t\t\t\t[\"P5Live\", \"https://teddavis.org/p5live/\" ], \n\t\t\t\t[\"javascript\", \"P5js, https://p5js.org/\"], \n\t\t\t\t[\"Co-coding\"]],\n\t\t\t[\"commands\", [\"\",\"see 'about p5Live' ? \"]],\n\t\t\t[\"reference\", [\"p5js\", \" https://p5js.org/reference/\"], [\"javascript\", \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference\"] ]\n\t\t\t];\nvar txtsize = 150;\nvar subtitlesize = 100;\nvar subtextsize = 50;\nvar points = [];\nlet mic, fft, soundcard;\n\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL);\n\tstate = 0;\n\tsubstate = 0;\n\tfillval = 123;\n\tcreateDiv('this is some text');\n\t\n\tmic = new p5.AudioIn();\n\tmic.start();\n\t\n\t\tsoundcard = new p5.AudioIn();\n\tsoundcard.getSources(function(sourcelist) {\n\t\tprint(sourcelist);\n\t\tsoundcard.setSource(1); // has to be done in callback!\n\t\tsoundcard.start();\n\t\tsoundcard.connect();\n\t\t /// get list by requesting soundcard.getSources()\n\t});\n\t\n\tfft = new p5.FFT();\n\tfft.setInput(soundcard);\n\n}\n\nfunction mousePressed() {\n  if (mouseX > 0 && mouseX < 100 && mouseY > 0 && mouseY < 100) {\n    let fs = fullscreen();\n    fullscreen(!fs);\n  }\n}\n\n\n///When editor is enabled keypresses are captured, so CTRL-E before using keys!!!\nfunction keyPressed() {\n  if (keyCode === RIGHT_ARROW) {\n  \tif (state < txt.length-1) {\n    \tstate = state + 1;\n    \tsubstate = 0;\n    \t// fillval = 255;\n  \t}\n  } else if (keyCode === LEFT_ARROW) {\n  \tif (state > 0) {\n    \tstate = state - 1;\n    \tsubstate = 0;\n    }\n  } else if (keyCode === UP_ARROW) {\n    if (substate > 0) {\n    \tsubstate = substate - 1;\n    }\n  }else if (keyCode === DOWN_ARROW) {\n  \tif (substate < txt[state].length - 1) {\n    \tsubstate = substate + 1;\n\t}\n  }\n  return false; // prevent default\n}\n\n\nfunction draw() {\n\tfft.analyze();\n\t\n\tscale (1);\n\ttranslate(-width/2,-height/2, -100);\n\ttitle = txt[state][0];\n\tsubtitle = txt[state][substate][0];\n\tsubtxt = txt[state][substate][1];\n\t// title = bass;\n\tbackground(0);\n\tfill(25,fillval,31);\n\ttextSize(txtsize);\n\t// textAlign(CENTER,CENTER)\n\ttextFont(rus);\n\ttext(title , 0, 0, width, height);\n\t\tif (substate > 0) {\n\t\ttextFont(subbold);\n\t\ttextSize(subtitlesize);\n\t\ttext(subtitle, 200,200);\n\t\ttextSize(subtextsize);\n\t\ttextFont(subfont);\n\t\ttext(subtxt, 200,400,1200,400);\n\t\t\n\t}\n\t  \n  let spectrum = fft.analyze();\n  \n  noFill();\n  stroke(0,255,50);\n  beginShape();\n  for (i = 0; i < spectrum.length; i++) {\n    vertex(i, map(spectrum[i], 0, 255, height, 0));\n  }\n  endShape();\n}"
    },
    {
      "sketchName": "LiveCoding103 - fine_control",
      "sketchCode": "function preload() {\n\tsubfont = loadFont('includes/fonts/RobotoMono-Regular.ttf');\n\trus = loadFont('includes/fonts/USSR.ttf');\n\tsubbold = loadFont('includes/fonts/Inconsolata-Bold.ttf');\n\n}\n\nvar txt = [\t[\"Fine Control\"], \n\t\t\t[\"Audio Reactive\", \n\t\t\t\t[\"FFT\", \"split it out in freq ranges, standard: bass, mid, treble or specify your own\"]], \n\t\t\t[\"midi scaling\", \n\t\t\t\t[\"react to changes\", \"map midi to some of our parameters\"]],\n\t\t\t];\nvar txtsize = 150;\nvar subtitlesize = 100;\nvar subtextsize = 50;\n\n//FFTvars\nlet mic, fft, soundcard;\n\n\n//midivars\nlet loadScripts = [\"includes/js/webmidi.min.js\"];\nlet midiInput, midiOutput;\nlet mA, mB, mC = 0;\nlet clockcount = 0;\nlet beat = 0;\nlet clockUpdated = false;\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL);\n\tstate = 0;\n\tsubstate = 0;\n\tfillval = 123;\n\n\t// mic = new p5.AudioIn();\n\t// mic.start();\n\tsoundcard = new p5.AudioIn();\n\tsoundcard.getSources(function(sourcelist) {\n\t\tprint(sourcelist)\n\t\tsoundcard.setSource(1);\n\t\tsoundcard.start();\n\t\t /// get list by requesting soundcard.getSources()\n\t});\n\t\n\tsoundcard.connect();\n\n\t\n\tfft = new p5.FFT();\n\t\n\t// fft.setInput(mic);\n\tfft.setInput(soundcard);\n\n\t// setupMidi(1, 0); // by id\n\t// setupMidi(\"nanoKONTROL\", \"nanoKONTROL\"); // by name\n\tsetupMidi(\"Circuit Mono Station\", \"Circuit Mono Station\"); // by name\n}\n\nfunction mousePressed() {\n  if (mouseX > 0 && mouseX < 100 && mouseY > 0 && mouseY < 100) {\n    let fs = fullscreen();\n    fullscreen(!fs);\n  }\n}\n\n\n///When editor is enabled keypresses are captured, so CTRL-E before using keys!!!\nfunction keyPressed() {\n  if (keyCode === RIGHT_ARROW) {\n  \tif (state < txt.length-1) {\n    \tstate = state + 1;\n    \tsubstate = 0;\n    \t// fillval = 255;\n  \t}\n  } else if (keyCode === LEFT_ARROW) {\n  \tif (state > 0) {\n    \tstate = state - 1;\n    \tsubstate = 0;\n    }\n  } else if (keyCode === UP_ARROW) {\n    if (substate > 0) {\n    \tsubstate = substate - 1;\n    }\n  }else if (keyCode === DOWN_ARROW) {\n  \tif (substate < txt[state].length - 1) {\n    \tsubstate = substate + 1;\n\t}\n  }\n  return false; // prevent default\n}\n\n\nfunction draw() {\n\t// fft.analyze();\n\tupdateClock();\n\tscale (1);\n\ttranslate(-width/2,-height/2, -100);\n\ttitle = txt[state][0];\n\tsubtitle = txt[state][substate][0];\n\tsubtxt = txt[state][substate][1];\n\t// title = bass;\n\tbackground(0);\n\tfill(25,fillval,31);\n\ttextSize(txtsize);\n\t// textAlign(CENTER,CENTER)\n\ttextFont(rus);\n\ttext(title , 0, 0, width, height);\n\t\tif (substate > 0) {\n\t\ttextFont(subbold);\n\t\ttextSize(subtitlesize);\n\t\ttext(subtitle, 200,200);\n\t\ttextSize(subtextsize);\n\t\ttextFont(subfont);\n\t\ttext(subtxt, 200,800,1200,400);\n\t\t\n\t}\n\t  \n  let spectrum = fft.analyze();\n    // Get the volumes of different frequency ranges\n  var bass    = fft.getEnergy(\"bass\");\n  var mid     = fft.getEnergy(\"mid\");     \n  var treble  = fft.getEnergy(\"treble\");\n  var bandpass = fft.getEnergy(100,200);\n\n  // Map the range of each volume with your desired numbers \n  var mapBass     = map( bass, 0, 255, 0, 100 );\n  var mapMid      = map( mid, 0, 255, 0, 100 );\n  var mapTreble   = map( treble, 0, 255, 0, 100 );\n  var mapBandpass = map( bandpass, 0,255, 0,100);\n  \n  //beginShape();\n  //for (i = 0; i < spectrum.length; i++) {\n  //  vertex(i, map(spectrum[i], 0, 225, height, 0));\n  //}\n  //endShape();\n  \n  \n  textSize(50);\n  textFont(rus);\n  \n  text(mapBass , 100, 200, width, height);\n  fill(255,255,0,150);\n  rect(100,200,10*mapBass,50);\n  \n  \n  text(mapMid , 100, 300, width, height);\n  fill(255,0,255,150);\n  rect(100,300,20*mapMid,50);\n  \n  \n  text(mapTreble , 100, 400, width, height);\n  fill(0,255,255,150);\n  rect(100,400,200*mapTreble,50);\n  \n  \n  textSize(75);\n  text(mapBandpass , 100, 550, width, height);\n  fill(225,255,255,150);\n  rect(100,500,2*mapBandpass,150);\n  \t\t\n  \t\t\n  debugValue(mA, 0);\n  debugValue(mB, 50);\n  debugValue(beat, -50);\n  \n  fill(255,0,0,120);\n  rect (width - 110, height - 155, mB , 50);\n  \n}\n\n\n\n\n\nfunction debugValue(val, yoff) {\n\ttextSize(40);\n\tfill(255);\n\ttext(val,width - 100, height - 100 - yoff, 1000,1000 );\n\t// print(val);\n}\n\nfunction updateClock(){\n\t//ppq = 24 > beat = 24/4 every 6 pulses 1 beat \n\tif (clockcount%6 === 0 && clockUpdated === false) {\n\t\tbeat = beat + 1;\n\t\tclockUpdated = true;\n\t}\n\tif (clockcount%6 !== 0) {\n\t\tclockUpdated = false;\n\t}\n}\n\n\n\n//// midi functions template below, copy-pastable (same as midi_setup)\n\n\nfunction noteOn(note) {\n\tprint(note); // .type, .channel, .name, .number, .octave, .velocity\n}\n\nfunction noteOff(note) {\n\tprint(note); // .type, .channel, .name, .number, .octave, .velocity\n}\n\nfunction pitchBend(pitch) {\n\tprint(pitch); // .type, .channel, .value\n}\n\nfunction controlChange(control) {\n\t// print(control); // .type, .channel, .controllerNumber, .controllerName, .value\n\t// debugValue(control.controllerNumber) // debuValue must be run inside draw() as it uses \"text\" and \"fill\"\n\tmA = control.controllerNumber;\n\tmB = control.value;\n}\n\nfunction midiToFreq(noteNumber) {\n\treturn 440 * Math.pow(2, (noteNumber - 69) / 12);\n}\n\n\n\nfunction setupMidi(idIn, idOut) {\n\tWebMidi.enable(function(err) {\n\t\tif(err) {\n\t\t\tconsole.log(\"WebMidi could not be enabled.\", err);\n\t\t}\n\n\t\t// Print to console available MIDI in/out id/names\n\t\tWebMidi.inputs.forEach(function(element, c) {\n\t\t\tprint(\"in  \\[\" + c + \"\\] \" + element.name);\n\t\t});\n\t\tWebMidi.outputs.forEach(function(element, c) {\n\t\t\tprint(\"out \\[\" + c + \"\\] \" + element.name);\n\t\t});\n\n\t\t// assign in channel:\n\t\tif(typeof idIn === 'number') {\n\t\t\tmidiInput = WebMidi.inputs[idIn];\n\t\t} else {\n\t\t\tmidiInput = WebMidi.getInputByName(idIn);\n\t\t}\n\n\t\tif(typeof idOut === 'number') {\n\t\t\tmidiOutput = WebMidi.outputs[idOut];\n\t\t} else {\n\t\t\tmidiOutput - WebMidi.getOutputByName(idOut);\n\t\t}\n\n\t\t// noteOn\n\t\tmidiInput.addListener('noteon', \"all\", function(e) {\n\t\t\tlet note = {\n\t\t\t\ttype: 'noteon'\n\t\t\t};\n\t\t\tnote.channel = e.channel;\n\t\t\tnote.number = e.note.number;\n\t\t\tnote.name = e.note.name;\n\t\t\tnote.octave = e.note.octave;\n\t\t\tnote.velocity = floor(127 * e.velocity);\n\t\t\tnoteOn(note);\n\t\t});\n\n\t\t// noteOff\n\t\tmidiInput.addListener('noteoff', \"all\", function(e) {\n\t\t\tlet note = {\n\t\t\t\ttype: 'noteoff'\n\t\t\t};\n\t\t\tnote.channel = e.channel;\n\t\t\tnote.number = e.note.number;\n\t\t\tnote.name = e.note.name;\n\t\t\tnote.octave = e.note.octave;\n\t\t\tnote.velocity = 0;\n\t\t\tnoteOff(note);\n\t\t});\n\n\t\t// pitchBend\n\t\tmidiInput.addListener('pitchbend', \"all\", function(e) {\n\t\t\tlet pitch = {\n\t\t\t\ttype: 'pitchbend'\n\t\t\t};\n\t\t\tpitch.channel = e.channel;\n\t\t\tpitch.value = floor(127 * e.value);\n\t\t\tpitchBend(pitch);\n\t\t});\n\n\t\t// controlChange\n\t\tmidiInput.addListener('controlchange', \"all\", function(e) {\n\t\t\tlet control = {\n\t\t\t\ttype: 'controlchange'\n\t\t\t};\n\t\t\tcontrol.channel = e.channel;\n\t\t\tcontrol.controllerNumber = e.controller.number;\n\t\t\tcontrol.controllerName = e.controller.name;\n\t\t\tcontrol.value = e.value\n\t\t\tcontrolChange(control);\n\t\t\tprint(e);\n\t\t});\n\t\t\n\t\t// clock, requires updateClock fucntion defined above + some global vars (hacky)\n\t\tmidiInput.addListener('clock', 'all', function(e) {\n\t\t\tlet clock = {\n\t\t\t\ttype: 'clock'\n\t\t\t};\n\t\t\t// print(e);\n\t\t\tclockcount = clockcount + 1;\n\t\t})\n\n\t});\n}\n\n"
    },
    {
      "sketchName": "LiveCoding104-parametricmodeling",
      "sketchCode": "function preload() {\n\trus = loadFont('includes/fonts/USSR.ttf');\n}\n\n\n//FFTvars\nlet mic, fft, soundcard;\nlet bass,mid,treble,bandpass;\nlet mapBass,mapMid,mapTreble,mapBandpass;\n//midivars\nlet loadScripts = [\"includes/js/webmidi.min.js\"];\nlet midiInput, midiOutput;\nlet mA, mB, mC = 0;\nlet clockcount = 0;\nlet beat = 0;\nlet clockUpdated = false;\n\n//cubevars\nlet cubeSize = 100;\nlet cubeIterator = 10;\nlet cubeColorR = 255; \nlet cubeSeed = 10;\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight,WEBGL);\n\tnoiseSeed(99);\n\tstroke(255, 255);\n\ttextFont(rus);\n\t// mic = new p5.AudioIn();\n\t// mic.start();\n\t\n\tsoundcard = new p5.AudioIn();\n\tsoundcard.getSources(function(sourcelist) {\n\t\tprint(sourcelist);\n\t\tsoundcard.setSource(1); // has to be done in callback!\n\t\tsoundcard.start();\n\t\tsoundcard.connect();\n\t\t /// get list by requesting soundcard.getSources()\n\t});\n\t\n\t\n\tfft = new p5.FFT();\n\tfft.setInput(soundcard);\n\t  // setupMidi(1, 0); // by id\n\t// setupMidi(\"nanoKONTROL\", \"nanoKONTROL\"); // by name\n\tsetupMidi(\"Circuit Mono Station\", \"Circuit Mono Station\"); // by name\n\t\n\t\n\t\n}\n\nfunction draw() {\n\tFFTanalyse ();\n\tupdateClock();\n\tbackground(25);\n\t\n\tfill(0,55,0);\n\tdebugValue(beat,50);\n\t\n\tpush();\n\tdrawRotatedCube();\n\tpop();\n\n\t\n}\n\nfunction FFTanalyse(){\n\tlet spectrum = fft.analyze();\n    // Get the volumes of different frequency ranges\n\tbass    = fft.getEnergy(\"bass\");\n\tmid     = fft.getEnergy(\"mid\");     \n\ttreble  = fft.getEnergy(\"treble\");\n\tbandpass = fft.getEnergy(100,200);\n\t\n\t  // Map the range of each volume with your desired numbers \n\tmapBass     = map( bass, 0, 255, 0, 100 );\n\tmapMid      = map( mid, 0, 255, 0, 100 );\n\tmapTreble   = map( treble, 0, 255, 0, 100 );\n\tmapBandpass = map( bandpass, 0,255, 0,100);\n}\n\n\nfunction updateMidiVars(note) {\n\tcubeSize = random(10,500);\n\tcubeIterator = random(2,30);\n\tcubeColorR = random(0,255); \n\tcubeSeed = random(10,100);\n\tnoiseSeed(cubeSeed);\n\t\n}\n\n\nfunction drawRotatedCube() {\n\tfill(0,225,0);\n\tfor (let i = 0; i < cubeIterator; i++) {\n\t\tfill(0,cubeColorR,0);\n\t\tfill(0,215,0);\n\t\tpush();\n\t\ttranslate(i*cubeSize-500, 0, 0);\n\t\trotateX(noise(i)*10);\n\t\trotateY(noise(i+1));\n\t\tbox(mapBass*4);\n\t\t// print(noise(i));\n\t\tpop();\n\t\t// debugValue(mapBass,100);\n\n\t}\n\t\n}\n\n\n\n\nfunction debugValue(val, yoff) {\n\ttextSize(40);\n\tfill(0,0,255);\n\trect(width/2 - 105,height/2 -105 -yoff,100,50);\n\t// rect(0-width/2 - 100, 0-height/2 - 100, 100, 100);\n\tfill(255);\n\ttext(val,width/2 - 100,height/2 -100 -yoff, 100, 100 );\n\t// print(val);\n}\n\n\nfunction updateClock(){\n\t//ppq = 24 > beat = 24/4 every 6 pulses 1 beat \n\tif (clockcount%6 === 0 && clockUpdated === false) {\n\t\tbeat = beat + 1;\n\t\tclockUpdated = true;\n\t}\n\tif (clockcount%6 !== 0) {\n\t\tclockUpdated = false;\n\t}\n}\n\n\n\n//// midi functions template below, copy-pastable (same as midi_setup)\n\n\nfunction noteOn(note) {\n\t// print(note); // .type, .channel, .name, .number, .octave, .velocity\n\tupdateMidiVars(note);\n}\n\nfunction noteOff(note) {\n\t// print(note); // .type, .channel, .name, .number, .octave, .velocity\n}\n\nfunction pitchBend(pitch) {\n\tprint(pitch); // .type, .channel, .value\n}\n\nfunction controlChange(control) {\n\t// print(control); // .type, .channel, .controllerNumber, .controllerName, .value\n\t// debugValue(control.controllerNumber) // debuValue must be run inside draw() as it uses \"text\" and \"fill\"\n\tmA = control.controllerNumber;\n\tmB = control.value;\n}\n\nfunction midiToFreq(noteNumber) {\n\treturn 440 * Math.pow(2, (noteNumber - 69) / 12);\n}\n\n\n\nfunction setupMidi(idIn, idOut) {\n\tWebMidi.enable(function(err) {\n\t\tif(err) {\n\t\t\tconsole.log(\"WebMidi could not be enabled.\", err);\n\t\t}\n\n\t\t// Print to console available MIDI in/out id/names\n\t\tWebMidi.inputs.forEach(function(element, c) {\n\t\t\tprint(\"in  \\[\" + c + \"\\] \" + element.name);\n\t\t});\n\t\tWebMidi.outputs.forEach(function(element, c) {\n\t\t\tprint(\"out \\[\" + c + \"\\] \" + element.name);\n\t\t});\n\n\t\t// assign in channel:\n\t\tif(typeof idIn === 'number') {\n\t\t\tmidiInput = WebMidi.inputs[idIn];\n\t\t} else {\n\t\t\tmidiInput = WebMidi.getInputByName(idIn);\n\t\t}\n\n\t\tif(typeof idOut === 'number') {\n\t\t\tmidiOutput = WebMidi.outputs[idOut];\n\t\t} else {\n\t\t\tmidiOutput - WebMidi.getOutputByName(idOut);\n\t\t}\n\n\t\t// noteOn\n\t\tmidiInput.addListener('noteon', \"all\", function(e) {\n\t\t\tlet note = {\n\t\t\t\ttype: 'noteon'\n\t\t\t};\n\t\t\tnote.channel = e.channel;\n\t\t\tnote.number = e.note.number;\n\t\t\tnote.name = e.note.name;\n\t\t\tnote.octave = e.note.octave;\n\t\t\tnote.velocity = floor(127 * e.velocity);\n\t\t\tnoteOn(note);\n\t\t});\n\n\t\t// noteOff\n\t\tmidiInput.addListener('noteoff', \"all\", function(e) {\n\t\t\tlet note = {\n\t\t\t\ttype: 'noteoff'\n\t\t\t};\n\t\t\tnote.channel = e.channel;\n\t\t\tnote.number = e.note.number;\n\t\t\tnote.name = e.note.name;\n\t\t\tnote.octave = e.note.octave;\n\t\t\tnote.velocity = 0;\n\t\t\tnoteOff(note);\n\t\t});\n\n\t\t// pitchBend\n\t\tmidiInput.addListener('pitchbend', \"all\", function(e) {\n\t\t\tlet pitch = {\n\t\t\t\ttype: 'pitchbend'\n\t\t\t};\n\t\t\tpitch.channel = e.channel;\n\t\t\tpitch.value = floor(127 * e.value);\n\t\t\tpitchBend(pitch);\n\t\t});\n\n\t\t// controlChange\n\t\tmidiInput.addListener('controlchange', \"all\", function(e) {\n\t\t\tlet control = {\n\t\t\t\ttype: 'controlchange'\n\t\t\t};\n\t\t\tcontrol.channel = e.channel;\n\t\t\tcontrol.controllerNumber = e.controller.number;\n\t\t\tcontrol.controllerName = e.controller.name;\n\t\t\tcontrol.value = e.value\n\t\t\tcontrolChange(control);\n\t\t\tprint(e);\n\t\t});\n\t\t\n\t\t// clock, requires updateClock fucntion defined above + some global vars (hacky)\n\t\tmidiInput.addListener('clock', 'all', function(e) {\n\t\t\tlet clock = {\n\t\t\t\ttype: 'clock'\n\t\t\t};\n\t\t\t// print(e);\n\t\t\tclockcount = clockcount + 1;\n\t\t});\n\n\t});\n}\n\n"
    }
  ]
}